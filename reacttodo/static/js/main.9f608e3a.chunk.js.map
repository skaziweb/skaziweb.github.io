{"version":3,"sources":["components/Header.js","components/AddTodo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["title","className","addTodo","useState","value","setValue","btnClick","trim","alert","placeholder","onChange","event","target","onKeyPress","e","key","onClick","todoItems","toogleComplete","removeTodo","todos","map","todo","id","complete","App","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","prevState","Date","now","toString","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAGe,G,YAAA,YAAkB,IAAdA,EAAa,EAAbA,MACf,OACI,yBAAKC,UAAU,oBACX,4BAAMD,MCHH,G,MAAA,YAAkB,IAAfE,EAAc,EAAdA,QAAc,EACFC,mBAAS,IADP,mBACrBC,EADqB,KACdC,EADc,KAGtBC,EAAW,WACVF,EAAMG,QACLL,EAAQE,GACRC,EAAS,KAETG,MAAM,uIAad,OACI,yBAAKP,UAAU,aACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBACX,2BACIQ,YAAY,8FACZC,SAfH,SAACC,GACdN,EAASM,EAAMC,OAAOR,QAeNS,WAZJ,SAACC,GACC,UAAVA,EAAEC,KACFT,KAWYF,MAAQA,IAEZ,4BACIY,QAASV,GADb,yDC/BL,G,MAAA,YAAgD,IAA7CW,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WAOnCC,EAAQH,EAAUI,IAAI,SAACC,GAAD,OACxB,wBAAIP,IAAKO,EAAKC,GAAItB,UAAWqB,EAAKE,SAAW,uBAAyB,gBAClER,QAAS,kBAROO,EAQcD,EAAKC,QAPvCL,EAAeK,GADI,IAACA,IAShB,8BACKD,EAAKE,SAAW,SAAM,GAD3B,IACgCF,EAAKtB,OAErC,0BAAMC,UAAU,cAChBe,QAAS,kBAVGO,EAUcD,EAAKC,QATnCJ,EAAWI,GADI,IAACA,IASZ,aAMR,OACI,yBAAKtB,UAAU,aACX,yBAAKA,UAAU,oBACX,wBAAIA,UAAU,YACTmB,OC8BNK,MAlDf,WAAgB,IAAD,EACatB,mBAAS,IADtB,mBACNiB,EADM,KACCM,EADD,KAyCb,OAtCAC,oBAAU,WACR,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MAC1DN,EAASE,IACR,IAEHD,oBAAU,WACRI,aAAaE,QAAQ,QAASJ,KAAKK,UAAUd,KAC5C,CAACA,IAgCF,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CAAQD,MAAM,oBACd,kBAAC,EAAD,CAASE,QAhCM,SAAEF,GACnB0B,EAAS,SAAAS,GAAS,OAEd,CACEZ,GAAIa,KAAKC,MAAMC,WACftC,QACAwB,UAAU,IALE,mBAOXW,SAyBL,kBAAC,EAAD,CAAUlB,UAAWG,EAAOF,eApBT,SAACK,GACtBG,EACE,SAAAN,GAAK,OAAIA,EAAMC,IAAI,SAAAP,GAIjB,OAHGA,EAAES,KAAOA,IACVT,EAAEU,UAAYV,EAAEU,UAEXV,OAcmDK,WAV7C,SAACI,GAClBG,EACE,SAAAN,GAAK,OAAIA,EAAMmB,OAAO,SAAAjB,GAAI,OAAIA,EAAKC,KAAOA,WC/B5BiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9f608e3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default ( { title } ) => {\r\n    return (\r\n        <div className=\"container header\">\r\n            <h1>{ title }</h1>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './AddTodo.css';\r\n\r\nexport default ({ addTodo }) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const btnClick = () => {\r\n        if(value.trim()) {\r\n            addTodo(value);\r\n            setValue('');\r\n        } else {\r\n            alert('Поле не может быть пустым')\r\n        }\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        setValue(event.target.value)\r\n    }\r\n\r\n    const onEnter = (e) => {\r\n        if (e.key === 'Enter'){\r\n            btnClick();\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"addtodo_overlay\">\r\n                <div className=\"addtodo_form\">\r\n                    <input\r\n                        placeholder=\"Введите название\"\r\n                        onChange= {onChange}\r\n                        onKeyPress={onEnter}\r\n                        value= {value}\r\n                        ></input>\r\n                    <button\r\n                        onClick={btnClick}\r\n                        >Добавить</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './TodoList.css';\r\n\r\nexport default ({ todoItems, toogleComplete, removeTodo }) => {\r\n    const changeComplete = (id) => {\r\n        toogleComplete(id)\r\n    }\r\n    const removeItem = (id) => {\r\n        removeTodo(id);\r\n    }\r\n    const todos = todoItems.map((todo) =>\r\n        <li key={todo.id} className={todo.complete ? \"todolist_item active\" : \"todolist_item\"}\r\n            onClick={() => changeComplete(todo.id)}>\r\n            <span>\r\n                {todo.complete ? '✓' : ''} {todo.title}\r\n            </span> \r\n            <span className='remove_item'\r\n            onClick={() => removeItem(todo.id)}>\r\n                ✗\r\n            </span>\r\n        </li>\r\n    );\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"todolist_overlay\">\r\n                <ol className=\"todolist\">\r\n                    {todos}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport AddTodo from './components/AddTodo';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]');\r\n    setTodos(saved)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('todos', JSON.stringify(todos));\r\n  }, [todos])\r\n\r\n  const addNewTodo = ( title ) => {\r\n    setTodos(prevState => \r\n      [\r\n        {\r\n          id: Date.now().toString(),\r\n          title,\r\n          complete: false\r\n        },\r\n        ...prevState\r\n      ]\r\n    )\r\n  }\r\n\r\n  const toogleComplete = (id) => {\r\n    setTodos(\r\n      todos => todos.map(e => {\r\n        if(e.id === id) {\r\n          e.complete = !e.complete\r\n        }\r\n        return e\r\n      })\r\n    )\r\n  }\r\n  const removeTodo = (id) => {\r\n    setTodos(\r\n      todos => todos.filter(todo => todo.id !== id)\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title=\"Simple Todo App\"/>\r\n      <AddTodo addTodo={ addNewTodo }/>\r\n      <TodoList todoItems={todos} toogleComplete={toogleComplete} removeTodo={removeTodo}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}