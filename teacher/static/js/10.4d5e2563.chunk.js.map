{"version":3,"sources":["components/SectionTitle/index.tsx","components/TopLoading/index.tsx","components/SectionTitle/styles.module.scss","pages/Library/styles.module.scss","store/library/selectors.ts","pages/Library/index.tsx"],"names":["cx","classnames","bind","styles","SectionTitle","props","title","loading","bold","hasLoading","className","contains","memo","TopLoading","ref","useRef","useEffect","current","continuousStart","complete","color","module","exports","getLibraryInfoLoading","state","library","sectionLoading","linkLoading","topLoading","getLibrarySectionLoading","getLibraryLinkLoading","getLibraryInfo","Library","dispatch","useDispatch","useSelector","sections","links","isLoading","sectionIsLoading","linkIsLoading","libraryPending","linksBySection","forEach","link","section_id","push","Helmet","Container","map","section","name_en","id","href","target","rel","src","process","image_file_id","length"],"mappings":"wLAMMA,EAAKC,IAAWC,KAAKC,KAQrBC,EAA8B,SAACC,GAAW,IAE5CC,EAGED,EAHFC,MACAC,EAEEF,EAFFE,QACAC,EACEH,EADFG,KAGIC,EAAgC,qBAAZF,EAE1B,OACE,6BAAYG,UAAWV,EAAG,eAAgB,CAAEQ,SAA5C,UACE,mBAAGE,UAAWV,EAAG,SAAjB,SAA4BM,IAC3BG,GACC,qBAAKC,UAAWV,EAAG,UAAnB,SACE,cAAC,IAAD,CAAeO,UAAWA,EAASI,UAAQ,UAOtCC,mBAAKR,I,4DClBdS,EAA4B,SAAC,GAAiB,IAAfN,EAAc,EAAdA,QAC7BO,EAAMC,iBAAgD,MAkB5D,OARAC,qBAAU,WACJT,EARAO,EAAIG,SAASH,EAAIG,QAAQC,kBAIzBJ,EAAIG,SAASH,EAAIG,QAAQE,aAS5B,CAACZ,IAEG,cAAC,IAAD,CAAYa,MAAM,UAAUN,IAAKA,KAG3BF,mBAAKC,I,oBCtCpBQ,EAAOC,QAAU,CAAC,aAAe,kCAAkC,KAAO,0BAA0B,MAAQ,2BAA2B,OAAS,8B,oBCAhJD,EAAOC,QAAU,CAAC,MAAQ,wB,uHCEbC,EAAwB,SAACC,GAAD,OACnCA,EAAMC,QAAQC,gBACXF,EAAMC,QAAQE,aACdH,EAAMC,QAAQG,YAGNC,EAA2B,SAACL,GAAD,OACtCA,EAAMC,QAAQC,gBAGHI,EAAwB,SAACN,GAAD,OACnCA,EAAMC,QAAQE,aAGHI,EAAiB,SAACP,GAAD,OAAuCA,EAAMC,S,0BCCrEzB,EAAKC,IAAWC,KAAKC,KAkEZ6B,UAhEK,WAClB,IAAMC,EAAWC,cADO,EAMpBC,YAAYJ,GAFdK,EAJsB,EAItBA,SACAC,EALsB,EAKtBA,MAGIC,EAAYH,YAAYZ,GACxBgB,EAAmBJ,YAAYN,GAC/BW,EAAgBL,YAAYL,GAElCd,qBAAU,WACRiB,EAASQ,iBACR,CAACR,IAEJ,IAAMS,EAAuD,GAU7D,OARAL,EAAMM,SAAQ,SAACC,GACRF,EAAeE,EAAKC,cACvBH,EAAeE,EAAKC,YAAc,IAGpCH,EAAeE,EAAKC,YAAYC,KAAKF,MAIrC,qCACE,cAACG,EAAA,EAAD,UACE,wDAEF,cAAClC,EAAA,EAAD,CAAYN,QAAS+B,IACrB,qBAAK5B,UAAWV,EAAG,WAAnB,SACE,eAACgD,EAAA,EAAD,WACGZ,EAASa,KAAI,SAACC,GAAD,OACZ,sBAAKxC,UAAWV,EAAG,WAAnB,UACE,cAACI,EAAA,EAAD,CACEE,MAAO4C,EAAQC,QACf3C,MAAI,EACJD,QAASgC,GAAoBC,IAE/B,qBAAK9B,UAAWV,EAAG,SAAnB,SACG0C,EAAeQ,EAAQE,KACtBV,EAAeQ,EAAQE,IAAIH,KAAI,SAACL,GAAD,OAC7B,oBAAGS,KAAMT,EAAKA,KAAMU,OAAO,SAASC,IAAI,sBAAxC,UACE,qBACEC,IAAG,UAAKC,0CAAL,kBAAkDb,EAAKc,cAAvD,cAEL,+BAAOd,EAAKO,yBAOtBb,IAAcF,EAASuB,QACvB","file":"static/js/10.4d5e2563.chunk.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport classnames from 'classnames/bind';\nimport BounceLoading from 'components/BounceLoading';\n\nimport styles from './styles.module.scss';\n\nconst cx = classnames.bind(styles);\n\ninterface PropsType {\n  title: string;\n  loading?: boolean;\n  bold?: boolean;\n}\n\nconst SectionTitle: FC<PropsType> = (props) => {\n  const {\n    title,\n    loading,\n    bold,\n  } = props;\n\n  const hasLoading = typeof loading !== 'undefined';\n\n  return (\n    <blockquote className={cx('sectionTitle', { bold })}>\n      <p className={cx('title')}>{title}</p>\n      {hasLoading && (\n        <div className={cx('loader')}>\n          <BounceLoading loading={!!loading} contains />\n        </div>\n      )}\n    </blockquote>\n  );\n};\n\nexport default memo(SectionTitle);\n","import React, {\n  useRef,\n  useEffect,\n  FC,\n  memo,\n} from 'react';\nimport LoadingBar from 'react-top-loading-bar';\n\ninterface LoadingBarProps {\n  continuousStart: () => void;\n  complete: () => void;\n}\n\ninterface PropsType {\n  loading: boolean;\n}\n\nconst TopLoading: FC<PropsType> = ({ loading }) => {\n  const ref = useRef<HTMLDivElement & LoadingBarProps | null>(null);\n\n  const handleContinuousStart = () => {\n    if (ref.current) ref.current.continuousStart();\n  };\n\n  const handleComplete = () => {\n    if (ref.current) ref.current.complete();\n  };\n\n  useEffect(() => {\n    if (loading) {\n      handleContinuousStart();\n    } else {\n      handleComplete();\n    }\n  }, [loading]);\n\n  return <LoadingBar color=\"#f6bb3d\" ref={ref} />;\n};\n\nexport default memo(TopLoading);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionTitle\":\"SectionTitle_sectionTitle_1fqFx\",\"bold\":\"SectionTitle_bold_MpdaX\",\"title\":\"SectionTitle_title_1o40P\",\"loader\":\"SectionTitle_loader_3AES-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"links\":\"Library_links_198k0\"};","import { AppStateType } from 'types';\nimport LibraryState from 'types/libraryType';\n\nexport const getLibraryInfoLoading = (state: AppStateType): boolean => (\n  state.library.sectionLoading\n  || state.library.linkLoading\n  || state.library.topLoading\n);\n\nexport const getLibrarySectionLoading = (state: AppStateType): boolean => (\n  state.library.sectionLoading\n);\n\nexport const getLibraryLinkLoading = (state: AppStateType): boolean => (\n  state.library.linkLoading\n);\n\nexport const getLibraryInfo = (state: AppStateType): LibraryState => state.library;\n","import React, { FC, useEffect } from 'react';\nimport classnames from 'classnames/bind';\nimport { Helmet } from 'react-helmet';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport TopLoading from 'components/TopLoading';\nimport Container from 'components/Container';\nimport SectionTitle from 'components/SectionTitle';\nimport {\n  getLibraryInfo,\n  getLibraryInfoLoading,\n  getLibrarySectionLoading,\n  getLibraryLinkLoading,\n} from 'store/library/selectors';\nimport { libraryPending } from 'store/library/actions';\nimport { LibraryLinkType } from 'types/common';\nimport styles from './styles.module.scss';\n\nconst cx = classnames.bind(styles);\n\nconst Library: FC = () => {\n  const dispatch = useDispatch();\n\n  const {\n    sections,\n    links,\n  } = useSelector(getLibraryInfo);\n\n  const isLoading = useSelector(getLibraryInfoLoading);\n  const sectionIsLoading = useSelector(getLibrarySectionLoading);\n  const linkIsLoading = useSelector(getLibraryLinkLoading);\n\n  useEffect(() => {\n    dispatch(libraryPending());\n  }, [dispatch]);\n\n  const linksBySection: { [key: number]: LibraryLinkType[] } = {};\n\n  links.forEach((link) => {\n    if (!linksBySection[link.section_id]) {\n      linksBySection[link.section_id] = [];\n    }\n\n    linksBySection[link.section_id].push(link);\n  });\n\n  return (\n    <>\n      <Helmet>\n        <title>Novakid - Library</title>\n      </Helmet>\n      <TopLoading loading={isLoading} />\n      <div className={cx('library')}>\n        <Container>\n          {sections.map((section) => (\n            <div className={cx('section')}>\n              <SectionTitle\n                title={section.name_en}\n                bold\n                loading={sectionIsLoading || linkIsLoading}\n              />\n              <div className={cx('links')}>\n                {linksBySection[section.id] && (\n                  linksBySection[section.id].map((link) => (\n                    <a href={link.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <img\n                        src={`${process.env.REACT_APP_API_URL || ''}/files/${link.image_file_id}/content`}\n                      />\n                      <span>{link.name_en}</span>\n                    </a>\n                  ))\n                )}\n              </div>\n            </div>\n          ))}\n          {!isLoading && !sections.length && (\n            <div>Library is empty</div>\n          )}\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default Library;\n"],"sourceRoot":""}